name: R.A.I.D Scanner CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pre-commit
    
    - name: Run Black (Code Formatting)
      run: black --check --diff app/ tests/
    
    - name: Run isort (Import Sorting)
      run: isort --check-only --diff app/ tests/
    
    - name: Run Flake8 (Linting)
      run: flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run MyPy (Type Checking)
      run: mypy app/ --ignore-missing-imports --no-strict-optional

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Unit Tests
      run: |
        pytest tests/ -v --tb=short --cov=app --cov-report=xml --cov-report=term-missing
      env:
        PYTHONPATH: .
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
    
    - name: Run Bandit (Security Linting)
      run: bandit -r app/ -f json -o bandit-report.json || true
    
    - name: Run Safety (Dependency Vulnerability Scan)
      run: safety check --json --output safety-report.json || true
    
    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  docker-lab:
    name: Docker Lab Environment
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Start Lab Environment
      run: |
        cd docker
        docker-compose -f docker-compose.lab.yml up -d --quiet-pull
    
    - name: Wait for Services
      run: |
        sleep 60
        docker-compose -f docker/docker-compose.lab.yml ps
    
    - name: Test Lab Connectivity
      run: |
        # Test basic connectivity to lab services
        curl -f http://localhost:3000 || echo "JuiceShop not ready"
        curl -f http://localhost:8082 || echo "DVWA not ready"
        curl -f http://localhost:8080/WebGoat || echo "WebGoat not ready"
    
    - name: Stop Lab Environment
      run: |
        cd docker
        docker-compose -f docker-compose.lab.yml down -v

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Safe Mode Integration Tests
      run: |
        # Test against public test sites (safe mode only)
        python -m app.cli scan --target https://httpbin.org --mode safe --plugins banner_grab,health_header_check --output-dir ./test-reports
      env:
        PYTHONPATH: .
    
    - name: Validate Report Generation
      run: |
        ls -la ./test-reports/
        test -f ./test-reports/json/findings_*.json
        test -f ./test-reports/html/report_*.html
    
    - name: Upload Test Reports
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-reports
        path: ./test-reports/

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
    
    - name: Build Package
      run: |
        python -m build
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  ethical-check:
    name: Ethical Use Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate Ethical Guidelines
      run: |
        # Ensure ethical notices are present
        grep -q "AUTHORIZED USE ONLY" README.md
        grep -q "ETHICAL USE DISCLAIMER" LICENSE
        grep -q "proof_mode" app/core/plugin_loader.py
        grep -q "safe_replacement" app/data/payload_templates.json
        
        # Ensure no real exploit payloads in safe mode
        ! grep -r "'; DROP TABLE" app/plugins/ || exit 1
        ! grep -r "<script>alert" app/plugins/ || exit 1
        
        echo "‚úÖ Ethical guidelines validation passed"

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint, test, security, docker-lab, integration-test, build, ethical-check]
    if: always()
    
    steps:
    - name: Notify Success
      if: ${{ needs.lint.result == 'success' && needs.test.result == 'success' && needs.security.result == 'success' }}
      run: echo "üéâ All CI checks passed! Ready for deployment."
    
    - name: Notify Failure
      if: ${{ needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.security.result == 'failure' }}
      run: echo "‚ùå CI checks failed. Please review the logs and fix issues." 